{"version":3,"sources":["components/Map/marker/index.tsx","components/Map/index.tsx"],"names":["MarkerComponent","position","icon","name","description","useMemo","Marker","Popup","memo","MapComponent","places","customStyle","customStyles","palette","useTheme","mapRef","useRef","zoom","useAppSelector","state","map","useState","polyline","setPolyline","direction","configuration","useEffect","routes","geometry","coordinates","centerIcon","L","divIcon","html","renderToStaticMarkup","PersonPinCircle","className","customMarker","style","color","primary","main","popupAnchor","optionIcon","LocationOn","current","setView","departure","mapStyle","margin","MapContainer","center","zoomAnimation","scrollWheelZoom","zoomControl","whenCreated","TileLayer","attribution","url","id","accessToken","MAPBOX_TOKEN","tileSize","zoomOffset","item","index","coordinate","length","Polyline","pathOptions","error","weight","positions"],"mappings":"uPAYMA,EAAmC,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,YAC7D,OAAOC,mBAAQ,kBACX,cAACC,EAAA,EAAD,CAAQL,SAAUA,EAAUC,KAAMA,EAAlC,SACI,cAACK,EAAA,EAAD,UACI,gCACKJ,GAAQ,uBADb,IACqC,uBADrC,IAC4CC,GAAe,sBAD3D,aAKV,CAACA,EAAaF,EAAMC,EAAMF,KAGjBO,iBAAKR,G,yBCXdS,EAA6B,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAC3BC,EAAcC,cACbC,EAAWC,cAAXD,QACDE,EAASC,mBAERC,EAAQC,aAAe,SAAAC,GAAK,OAAEA,EAAMC,OAApCH,KAEP,EAAgCI,mBAA6B,IAA7D,mBAAOC,EAAP,KAAiBC,EAAjB,KAEA,EAAmCL,aAAe,SAAAC,GAAK,OAAIA,EAAMK,aAA1DA,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,cAGlBC,qBAAU,WACFF,GACAD,EAAYC,EAAUG,OAAO,GAAGC,SAASC,eAE9C,CAACL,IAEJ,IAAMM,EAAazB,mBAAQ,kBAAM0B,IAAEC,QAAQ,CACvCC,KAAMC,+BACF,cAACC,EAAA,EAAD,CAAiBC,UAAWzB,EAAY0B,aAAcC,MAAO,CAACC,MAAO1B,EAAQ2B,QAAQC,SACzFC,YAAa,CAAC,GAAI,QAClB,CAAC/B,EAAY0B,aAAcxB,EAAQ2B,QAAQC,OAEzCE,EAAatC,mBAAQ,kBAAM0B,IAAEC,QAAQ,CACvCC,KAAMC,+BAAqB,cAACU,EAAA,EAAD,CAAYR,UAAWzB,EAAY0B,gBAC9DK,YAAa,CAAC,GAAI,QAClB,CAAC/B,EAAY0B,eAUjB,OANAX,qBAAU,WACFX,EAAO8B,SACP9B,EAAO8B,QAAQC,QAAQrB,EAAcsB,UAAW9B,KAErD,CAACQ,EAAcsB,UAAW9B,IAEtB,qBAAKmB,UAAWzB,EAAYqC,SAAUV,MAAO,CAACW,OAAQ,QAAtD,SACH,eAACC,EAAA,EAAD,CAAcjC,KAAMA,EAAMkC,OAAQ1B,EAAcsB,UAAWX,UAAWzB,EAAYqC,SAAUI,eAAe,EAAMC,iBAAiB,EACpHC,aAAa,EACbC,YAXS,SAACnC,GAAD,OAAgBL,EAAO8B,QAAUzB,GASxD,UAGI,cAACoC,EAAA,EAAD,CACIC,YAAY,4JACZC,IAAI,qFACJC,GAAI,qBACJC,YAAaC,IACbC,SAAU,IACVC,YAAa,IAGbtC,EAAcsB,WAAa,cAAC,EAAD,CAAiB9C,SAAUwB,EAAcsB,UAAW7C,KAAM4B,IAGrFpB,GAAUA,EAAOU,KAAI,SAAC4C,EAAWC,GAC7B,OAAO,cAAC,EAAD,CAAiBhE,SAAU+D,EAAKE,WAAwBhE,KAAMyC,GAAbsB,MAI5D3C,EAAS6C,OAAS,GAAK,cAACC,EAAA,EAAD,CAAUC,YAAa,CAAC9B,MAAO1B,EAAQyD,MAAM7B,KAAM8B,OAAQ,GACnCC,UAAWlD,UAM3Dd,yBAAKC","file":"static/js/4.9fa41420.chunk.js","sourcesContent":["import {Marker, Popup} from \"react-leaflet\";\r\nimport {DivIcon, LatLngLiteral} from \"leaflet\";\r\nimport {FC, memo, ReactNode, useMemo} from \"react\";\r\n\r\ninterface MarkerProps {\r\n    position: LatLngLiteral,\r\n    icon?: DivIcon,\r\n    children?: ReactNode,\r\n    name?: string\r\n    description?: string\r\n}\r\n\r\nconst MarkerComponent: FC<MarkerProps> = ({position, icon, name, description}) => {\r\n    return useMemo(()=>(\r\n        <Marker position={position} icon={icon}>\r\n            <Popup>\r\n                <div>\r\n                    {name || 'A pretty CSS3 popup.'} <br/> {description || 'Easily customizable'}.\r\n                </div>\r\n            </Popup>\r\n        </Marker>\r\n    ),[description, icon, name, position])\r\n}\r\n\r\nexport default memo(MarkerComponent);","import {FC, memo, useEffect, useMemo, useRef, useState} from 'react';\r\nimport {renderToStaticMarkup} from 'react-dom/server';\r\nimport {LocationOn, PersonPinCircle} from '@material-ui/icons'\r\nimport {useTheme} from '@material-ui/core';\r\nimport {MapContainer, Polyline, TileLayer} from 'react-leaflet';\r\nimport L, {LatLngTuple} from 'leaflet';\r\n\r\nimport MarkerComponent from './marker';\r\nimport {MapProps} from './interfaces';\r\nimport {MAPBOX_TOKEN} from '../../services/credentials';\r\nimport {customStyles} from \"../../styles/theme\";\r\nimport {useAppSelector} from \"../../context/hooks\";\r\n\r\nconst MapComponent: FC<MapProps> = ({places}) => {\r\n    const customStyle = customStyles();\r\n    const {palette} = useTheme()\r\n    const mapRef = useRef<L.Map>()\r\n\r\n    const {zoom} = useAppSelector(state=>state.map)\r\n\r\n    const [polyline, setPolyline] = useState<Array<LatLngTuple>>([])\r\n\r\n    const {direction, configuration} = useAppSelector(state => state.direction)\r\n\r\n\r\n    useEffect(() => {\r\n        if (direction) {\r\n            setPolyline(direction.routes[0].geometry.coordinates)\r\n        }\r\n    }, [direction])\r\n\r\n    const centerIcon = useMemo(() => L.divIcon({\r\n        html: renderToStaticMarkup(\r\n            <PersonPinCircle className={customStyle.customMarker} style={{color: palette.primary.main}}/>),\r\n        popupAnchor: [2, -28]\r\n    }), [customStyle.customMarker, palette.primary.main])\r\n\r\n    const optionIcon = useMemo(() => L.divIcon({\r\n        html: renderToStaticMarkup(<LocationOn className={customStyle.customMarker}/>),\r\n        popupAnchor: [2, -28]\r\n    }), [customStyle.customMarker])\r\n\r\n    const whenCreatedHandler = (map: L.Map) => mapRef.current = map\r\n\r\n    useEffect(() => {\r\n        if (mapRef.current) {\r\n            mapRef.current.setView(configuration.departure, zoom);\r\n        }\r\n    }, [configuration.departure, zoom])\r\n\r\n    return <div className={customStyle.mapStyle} style={{margin: '-8px'}}>\r\n        <MapContainer zoom={zoom} center={configuration.departure} className={customStyle.mapStyle} zoomAnimation={true} scrollWheelZoom={true}\r\n                      zoomControl={false}\r\n                      whenCreated={whenCreatedHandler}>\r\n            <TileLayer\r\n                attribution='Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>'\r\n                url=\"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}\"\r\n                id={'mapbox/streets-v11'}\r\n                accessToken={MAPBOX_TOKEN}\r\n                tileSize={512}\r\n                zoomOffset={-1}\r\n            />\r\n            {\r\n                configuration.departure && <MarkerComponent position={configuration.departure} icon={centerIcon}/>\r\n            }\r\n            {\r\n                places && places.map((item: any, index: number) => {\r\n                    return <MarkerComponent position={item.coordinate} key={index} icon={optionIcon}/>\r\n                })\r\n            }\r\n            {\r\n                polyline.length > 0 && <Polyline pathOptions={{color: palette.error.main, weight: 5}}\r\n                                                               positions={polyline}/>\r\n            }\r\n        </MapContainer>\r\n    </div>\r\n}\r\n\r\nexport default memo(MapComponent);"],"sourceRoot":""}